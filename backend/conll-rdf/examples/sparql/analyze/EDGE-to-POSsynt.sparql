# extrapolate (syntactic) POS type from dependency labels =: POSsynt_UD

PREFIX conll: <http://ufal.mff.cuni.cz/conll2009-st/task-description.html#>
PREFIX fn: <http://www.w3.org/2005/xpath-functions#>
PREFIX nif: <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

#########################
# (1) verbs and adverbs #
#########################

INSERT {
	?word conll:POSsynt_UD "N".
	?head conll:POSsynt_UD "V".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(nsubj|obj|dobj|iobj|obl|vocative|expl|dislocated)"))
};

INSERT {
	?word conll:POSsynt_UD "V".
	?head conll:POSsynt_UD "V".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(csubj|ccomp|xcomp|advcl|aux|cop)"))
};

INSERT {
	?word conll:POSsynt_UD "AV".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(advmod)"))
};

INSERT {
	?word conll:POSsynt_UD "AV".
	?head conll:POSsynt_UD "V".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(discourse|mark)"))
};

INSERT {
	?word conll:POSsynt_UD "AV".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(neg)"))
	FILTER(NOT EXISTS{?word conll:POSsynt_UD []})
	?head conll:POSsynt_UD [].
	FILTER(NOT EXISTS{?head conll:POSsynt_UD "N"})
};

###############################
# (2) nominals and adnominals #
###############################

INSERT {
	?word conll:POSsynt_UD "N".
	?head conll:POSsynt_UD "N".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(nmod|appos|name)"))
};

INSERT {
	?word conll:POSsynt_UD "AN".
	?head conll:POSsynt_UD "N".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(nummod|amod|det|clf|case)"))
};

INSERT {
	?word conll:POSsynt_UD "V".
	?head conll:POSsynt_UD "N".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(acl)"))
};

INSERT {
	?word conll:POSsynt_UD "AN".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(neg)"))
	?head conll:POSsynt_UD "N".
};

#############
# (3) other #
#############

INSERT {
	?word conll:POSsynt_UD "X".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(punct|foreign)"))
};

INSERT {
	?word conll:POSsynt_UD "RM".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(regex(str(?edge),"^(cc)"))
};

#########################
# (4) propagation rules #
#########################

INSERT {
	?word conll:POSsynt_UD ?POSsynt.
	?head conll:POSsynt_UD ?POSsynt.
} WHERE {
	?word conll:EDGE ?edge.
	FILTER(regex(str(?edge),"^(conj|parataxis|flat|compound|fixed|mwe|list)"))
	?word conll:HEAD ?head.
	{ ?word conll:POSsynt_UD ?POSsynt. FILTER(NOT EXISTS { ?head conll:POSsynt_UD [] }) } UNION
	{ ?head conll:POSsynt_UD ?POSsynt. FILTER(NOT EXISTS { ?word conll:POSsynt_UD [] }) }
};

INSERT {
	?word conll:POSsynt_UD ?POSsynt.
	?head conll:POSsynt_UD ?POSsynt.
} WHERE {
	?word conll:EDGE ?edge.
	FILTER(regex(str(?edge),"^(conj|parataxis|flat|compound|fixed|mwe|list)"))
	?word conll:HEAD ?head.
	{ ?word conll:POSsynt_UD ?POSsynt. FILTER(NOT EXISTS { ?head conll:POSsynt_UD [] }) } UNION
	{ ?head conll:POSsynt_UD ?POSsynt. FILTER(NOT EXISTS { ?word conll:POSsynt_UD [] }) }
};

############
# (5) root #
############

INSERT {	# most roots are verbal, however, many unclassified roots are just fragments
	?word conll:POSsynt_UD "V".
} WHERE {
	?word conll:EDGE ?edge.
	?word conll:HEAD ?head.
	FILTER(NOT EXISTS{?word conll:POSsynt_UD [] })
	FILTER(regex(str(?edge),"^(root)"))
};